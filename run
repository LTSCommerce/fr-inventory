#!/usr/bin/env bash

# This script wraps the calls to docker compose run to fire up CLI commands within the backend container

# BASH safe error handling
set -euo pipefail

# Entering project root directory
readonly projectRootDir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
cd "$projectRootDir"

readonly runnerContainerName="runner"

function composeRunBackend(){
    local runCmd="docker compose run --rm $runnerContainerName "
    set -x
    $runCmd ${@}
    set +x
}

# Some new lines for readability
echo
echo

# Getting argument
readonly arg=${1:-"'not set'"}
case "$arg" in
    quickstart)
        echo "Run all Quick Start Commands"
        if [[ ! -f .env ]]; then
          cp .env-dist .env;
        fi
        $0 up \
          && $0 install \
          && $0 generate \
          && $0 db-push \
          && $0 db-fill
        echo "System full installed and database seeded"
        $0 ps
        ;;
    up)
        echo "Start Docker Containers"
        docker compose up -d
        ;;
    down)
        echo "Stop Docker Containers"
        docker compose down
        ;;
    destroy)
        echo "Stop Docker Containers and Remove Data"
        docker compose down -v --remove-orphans
        ;;
    ps)
        echo "List of running Docker Containers"
        docker compose ps
        ;;
    i|install)
        echo "Install all packages"
        composeRunBackend yarn install
        ;;
    p|db-push)
        echo "Force update DB to match Schema"
        composeRunBackend yarn prisma db push
        ;;
    m|db-migrate)
        echo "Create and Run DB Migrations"
        composeRunBackend yarn prisma migrate dev
        ;;
    g|generate)
        echo "Generate client"
        composeRunBackend yarn prisma generate
        ;;
    f|db-fill)
        echo "Fill DB with Seed Data"
        composeRunBackend yarn prisma db seed
        ;;
    studio)
        echo "Run Prisma Studio"
        docker compose run --rm -p 5555:5555 $runnerContainerName yarn prisma studio --browser none --hostname 0.0.0.0
        ;;
    yarn)
        echo "Run Yarn Command"
        composeRunBackend yarn ${@:2}
        ;;
    dev)
        echo "Run Dev Server for local development"
        docker compose run --rm -p 3000:3000 $runnerContainerName yarn dev
        ;;
    *)
        echo "Help"
        echo
        echo "The $0 script has the following options"
        echo
        grep -Pzo '(?s)\s+?([a-z|]+?)\)\s+?(?:echo ")[^"]+' "$0"  | sed -z 's/)\n        echo "/: /g' | column -s : -t
        ;;
esac

# Some new lines for readability
echo
echo