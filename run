#!/usr/bin/env bash

# This script wraps the calls to docker compose run to fire up CLI commands within the runner container

# Safe error handling
set -Eeuo pipefail

# Entering project root directory
readonly projectRootDir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
cd "$projectRootDir"

# Clearer variable name for the current script
readonly thisScriptName="$0"

# The name of the container to run things, this needs to be configured in docker-compose.yml
readonly runnerContainerName="runner"

# TTY is disabled by default, generally its not needed
# To enable TTY, export DISABLE_RUN_TTY=0 before calling run
# Also of course this can be overridden as required for specific run commands
# eg DISABLE_RUN_TTY=0 ./run yarn next lint
# Read more about this: https://stackoverflow.com/a/40026942
readonly disableTty="$([[ "${DISABLE_RUN_TTY:-0}" == "0" ]] && echo '--no-tty' || echo '')"

# This function will take an unlimited number of command arguments 
# and run them inside the runner container
function composeRunBackend(){
    local runCmd="docker compose run $disableTty --rm $runnerContainerName "
    local commandsInsideContainer=${@}
    set -x
    $runCmd bash -c "$commandsInsideContainer"
    set +x
}

# This function will take a port number and an unlimited number of command arguments 
# and run them inside the runner container, with the port mapped
function composeRunBackendWithPort(){
    local port=$1
    local runCmd="docker compose run $disableTty -p $port:$port --rm $runnerContainerName "
    local commandsInsideContainer=${@:2}
    set -x
    $runCmd bash -c "$commandsInsideContainer"
    set +x
}

# Some new lines for readability
echo
echo

# Getting argument
readonly arg=${1:-"'not set'"}

# Now we match the argument against various optoins
# Note, the structure of this block is important and indention must be preserved
# as this is used to autogenerate help
case "$arg" in
    quickstart)
        echo "Run all Quick Start Commands"
        if [[ ! -f .env ]]; then
          cp .env-dist .env;
        fi
        $thisScriptName up \
          && $thisScriptName install \
          && $thisScriptName generate \
          && $thisScriptName db-push \
          && $thisScriptName db-fill
        echo "System full installed and database seeded"
        $thisScriptName ps
        ;;
    up)
        echo "Start Docker Containers"
        docker compose up -d
        ;;
    down)
        echo "Stop Docker Containers"
        docker compose down
        ;;
    destroy)
        echo "Stop Docker Containers and Remove Data"
        docker compose down -v --remove-orphans
        ;;
    ps)
        echo "List of running Docker Containers"
        docker compose ps
        ;;
    i|install)
        echo "Install all packages, set up Husky"
        composeRunBackend yarn --cache-folder .next/cache/yarn install \
            && composeRunBackend yarn husky install
        ;;
    p|db-push)
        echo "Force update DB to match Schema"
        composeRunBackend yarn prisma db push
        ;;
    m|db-migrate)
        echo "Create and Run DB Migrations"
        composeRunBackend yarn prisma migrate dev
        ;;
    g|generate)
        echo "Generate client"
        composeRunBackend yarn prisma generate
        ;;
    f|db-fill)
        echo "Fill DB with Seed Data"
        composeRunBackend yarn prisma db seed
        ;;
    studio)
        echo "Run Prisma Studio"
        composeRunBackendWithPort 5555 yarn prisma studio --browser none --hostname 0.0.0.0
        ;;
    yarn)
        echo "Run Yarn Command"
        composeRunBackend yarn --cache-folder .next/cache/yarn ${@:2}
        ;;
    d|dev)
        echo "Run Dev Server for local development"
        composeRunBackendWithPort 3000 yarn dev
        ;;
    t|test)
        echo "Run Jest Tests"
        composeRunBackend yarn jest
        ;;
    tw|testw)
        echo "Run Jest Tests Automatically on File Update"
        composeRunBackend yarn jest --watch
        ;;    
    nd|node-debug)
        echo "Run node command (with debug)"
        composeRunBackendWithPort 9229 node --inspect-brk=0.0.0.0:9229 ${@:2}
        ;;
    n|node)
        echo "Run node command"
        composeRunBackend ${@:2}
        ;;
    *)
        echo "Help"
        echo
        echo "The $thisScriptName script has the following options"
        echo
        grep -Pzo '(?s)\s+?([a-z|]+?)\)\s+?(?:echo ")[^"]+' "$thisScriptName"  | sed -z 's/)\n        echo "/: /g' | column -s : -t
        ;;
esac

# Some new lines for readability
echo
echo